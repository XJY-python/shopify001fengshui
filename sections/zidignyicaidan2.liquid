{% comment %}
  自定义菜单系统 - 增强版
  左侧：下拉菜单按钮，右侧：产品信息展示
  说明：支持自定义宽度，下拉方式展现系列分类，右侧展示产品信息
{% endcomment %}

{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'section-related-products.css' | asset_url | stylesheet_tag }}
{{ 'font-awesome.css' | asset_url | stylesheet_tag }}

{% schema %}
{
  "name": "自定义菜单系统",
  "class": "custom-menu-section",
  "settings": [
    {
      "type": "header",
      "content": "布局设置"
    },
    {
      "type": "range",
      "id": "menu_width",
      "label": "菜单面板宽度",
      "min": 20,
      "max": 50,
      "step": 5,
      "default": 30,
      "unit": "%"
    },
    {
      "type": "range",
      "id": "product_width",
      "label": "产品面板宽度",
      "min": 50,
      "max": 80,
      "step": 5,
      "default": 70,
      "unit": "%"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "label": "桌面端每行产品数量",
      "min": 2,
      "max": 6,
      "step": 1,
      "default": 4,
      "unit": "个"
    },
    {
      "type": "range",
      "id": "columns_mobile",
      "label": "移动端每行产品数量",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 2,
      "unit": "个"
    },
    {
      "type": "range",
      "id": "rows_desktop",
      "label": "桌面端显示行数",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 3,
      "unit": "行"
    },
    {
      "type": "range",
      "id": "rows_mobile",
      "label": "移动端显示行数",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 2,
      "unit": "行"
    },
    {
      "type": "header",
      "content": "样式设置"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "主色调",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "边框颜色",
      "default": "#e1e1e1"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "背景颜色",
      "default": "#f8f8f8"
    },
    {
      "type": "header",
      "content": "边距设置"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "上边距",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "下边距",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "menu_category",
      "name": "菜单分类",
      "settings": [
        {
          "type": "text",
          "id": "category_title",
          "label": "分类标题",
          "default": "产品分类"
        },
        {
          "type": "text",
          "id": "category_description",
          "label": "分类描述",
          "default": "分类描述内容"
        },
        {
          "type": "header",
          "content": "菜单图片设置"
        },
        {
          "type": "image_picker",
          "id": "category_image",
          "label": "菜单图片"
        },
        {
          "type": "range",
          "id": "image_width",
          "label": "图片宽度",
          "min": 20,
          "max": 100,
          "step": 5,
          "default": 60,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "image_height",
          "label": "图片高度",
          "min": 20,
          "max": 100,
          "step": 5,
          "default": 60,
          "unit": "px"
        },
        {
          "type": "header",
          "content": "产品系列配置"
        },
        {
          "type": "collection_list",
          "id": "linked_collections",
          "label": "关联产品系列",
          "limit": 10
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "自定义菜单",
      "category": "导航",
      "blocks": [
        {
          "type": "menu_category",
          "settings": {
            "category_title": "热门商品",
            "category_description": "查看热门商品"
          }
        },
        {
          "type": "menu_category",
          "settings": {
            "category_title": "新品上市",
            "category_description": "最新上架商品"
          }
        }
      ]
    }
  ]
}
{% endschema %}

{%- style -%}
  .custom-menu-section-{{ section.id }} {
    display: flex;
    gap: 20px;
    padding: {{ section.settings.padding_top }}px 20px {{ section.settings.padding_bottom }}px;
    min-height: 500px;
    background-color: {{ section.settings.background_color }};
    max-width: 1200px;
    margin: 0 auto;
  }

  .menu-panel-{{ section.id }} {
    width: {{ section.settings.menu_width }}%;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .products-panel-{{ section.id }} {
    width: {{ section.settings.product_width }}%;
    padding: 20px;
    border: 1px solid {{ section.settings.border_color }};
    border-radius: 12px;
    background: white;
    min-height: 400px;
  }

  /* 下拉菜单样式 */
  .menu-category-{{ section.id }} {
    position: relative;
    background: white;
    border: 1px solid {{ section.settings.border_color }};
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .menu-category-{{ section.id }}:hover {
    background-color: #f8f8f8;
    border-color: #d0d0d0;
  }

  .menu-category-{{ section.id }}.active {
    background-color: #f0f8ff;
    border-color: {{ section.settings.primary_color }};
  }

  .category-header-{{ section.id }} {
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    gap: 10px;
  }

  .category-header-content {
    flex: 1;
    min-width: 0;
    display: flex;
    align-items: center;
    gap: 12px;
    flex-direction: row;
  }
  
  .category-image-{{ section.id }} {
    width: {{ block.settings.image_width }}px;
    height: {{ block.settings.image_height }}px;
    object-fit: cover;
    border-radius: 6px;
    flex-shrink: 0;
    order: -1; /* 确保图片显示在最左侧 */
  }

  .category-text-content {
    flex: 1;
    min-width: 0;
  }

  .category-header-{{ section.id }} h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
    line-height: 1.3;
    text-align: left;
  }

  .category-header-{{ section.id }} p {
    margin: 4px 0 0 0;
    font-size: 14px;
    color: #666;
    line-height: 1.4;
    display: block;
    text-align: left;
  }

  .dropdown-icon-container {
    flex-shrink: 0;
    margin-top: 4px;
  }

  .dropdown-icon-{{ section.id }} {
    transition: transform 0.3s ease;
    font-size: 12px;
    color: #666;
    display: block;
  }

  .dropdown-icon-{{ section.id }} {
    transition: transform 0.3s ease;
  }

  .menu-category-{{ section.id }}.active .dropdown-icon-{{ section.id }} {
    transform: rotate(180deg);
  }

  .dropdown-content-{{ section.id }} {
    display: none;
    padding: 15px;
    border-top: 1px solid {{ section.settings.border_color }};
    background: white;
  }

  .menu-category-{{ section.id }}.active .dropdown-content-{{ section.id }} {
    display: block;
  }

  .collection-list-{{ section.id }} {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .collection-item-{{ section.id }} {
    padding: 8px 0;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    transition: color 0.2s ease;
    text-align: center;
  }

  .collection-item-{{ section.id }}:hover {
    color: {{ section.settings.primary_color }};
  }

  .collection-item-{{ section.id }}:last-child {
    border-bottom: none;
  }

  /* 产品展示样式 */
  .product-grid-{{ section.id }} {
    display: grid;
    grid-template-columns: repeat({{ section.settings.columns_desktop }}, minmax(0, 1fr));
    gap: 20px;
  }
  
  .product-card-{{ section.id }} {
    border: 1px solid #f0f0f0;
    border-radius: 8px;
    padding: 15px;
    text-align: center;
    transition: all 0.3s ease;
    background: white;
    list-style: none;
    margin: 0;
  }

  .product-card-{{ section.id }} {
    border: 1px solid #f0f0f0;
    border-radius: 8px;
    padding: 15px;
    text-align: center;
    transition: all 0.3s ease;
    background: white;
  }

  .product-card-{{ section.id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    border-color: {{ section.settings.primary_color }};
  }

  .product-image-{{ section.id }} {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 6px;
    margin-bottom: 12px;
  }

  .product-title-{{ section.id }} {
    margin: 0 0 8px 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
  }

  .product-vendor-{{ section.id }} {
    margin: 0 0 8px 0;
    font-size: 14px;
    color: #666;
  }

  .product-price-{{ section.id }} {
    margin: 0;
    font-size: 18px;
    font-weight: bold;
    color: {{ section.settings.primary_color }};
  }

  .loading-{{ section.id }} {
    text-align: center;
    padding: 60px 20px;
    color: #999;
  }

  .empty-state-{{ section.id }} {
    text-align: center;
    padding: 60px 20px;
    color: #999;
  }

  .empty-state-{{ section.id }} h3 {
    margin: 0 0 10px 0;
    font-size: 18px;
    color: #666;
  }

  .empty-state-{{ section.id }} p {
    margin: 0;
    font-size: 14px;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .custom-menu-section-{{ section.id }} {
      flex-direction: column;
      padding: 20px 15px;
    }

    .menu-panel-{{ section.id }},
    .products-panel-{{ section.id }} {
      width: 100% !important;
    }

    .menu-panel-{{ section.id }} {
      order: 2;
      margin-top: 20px;
    }

    .products-panel-{{ section.id }} {
      order: 1;
      min-height: 300px;
    }

    .product-grid-{{ section.id }} {
      grid-template-columns: repeat({{ section.settings.columns_mobile }}, minmax(0, 1fr));
      gap: 15px;
    }

    .product-image-{{ section.id }} {
      height: 150px;
    }

    .product-title-{{ section.id }} {
      font-size: 14px;
    }

    .product-price-{{ section.id }} {
      font-size: 16px;
    }

    .category-header-{{ section.id }} {
      padding: 12px;
    }

    .dropdown-content-{{ section.id }} {
      padding: 12px;
    }
  }
{%- endstyle -%}

<div class="custom-menu-section-{{ section.id }}">
  <!-- 左侧菜单面板 -->
  <div class="menu-panel-{{ section.id }}">
    {% for block in section.blocks %}
      {% if block.type == 'menu_category' %}
        <div class="menu-category-{{ section.id }}" data-category="{{ block.id }}">
          <div class="category-header-{{ section.id }}">
            <div class="category-header-content">
              {% if block.settings.category_image %}
                <img class="category-image-{{ section.id }}" 
                     src="{{ block.settings.category_image | img_url: 'medium' }}" 
                     alt="{{ block.settings.category_title }}"
                     width="{{ block.settings.image_width }}"
                     height="{{ block.settings.image_height }}">
              {% endif %}
              <div class="category-text-content">
                <h3>{{ block.settings.category_title }}</h3>
                <p>{{ block.settings.category_description }}</p>
              </div>
            </div>
            <div class="dropdown-icon-container">
              <span class="dropdown-icon-{{ section.id }}">▼</span>
            </div>
          </div>
          
          <div class="dropdown-content-{{ section.id }}">
            {% if block.settings.linked_collections %}
              <ul class="collection-list-{{ section.id }}">
                {% for collection in block.settings.linked_collections %}
                  <li class="collection-item-{{ section.id }}" 
                      data-collection-id="{{ collection.id }}"
                      data-collection-handle="{{ collection.handle }}">
                    {{ collection.title }}
                  </li>
                {% endfor %}
              </ul>
            {% else %}
              <p class="empty-state-{{ section.id }}">未关联任何产品系列</p>
            {% endif %}
          </div>
        </div>
      {% endif %}
    {% endfor %}
    
    {% if section.blocks.size == 0 %}
      <div class="empty-state-{{ section.id }}">
        <h3>请添加菜单分类</h3>
        <p>在主题编辑器中点击"添加内容"来创建菜单分类</p>
      </div>
    {% endif %}
  </div>
  
  <!-- 右侧产品展示面板 -->
  <div class="products-panel-{{ section.id }}">
    <div class="empty-state-{{ section.id }}">
      <h3>请点击左侧菜单查看产品</h3>
      <p>点击菜单分类显示所有产品，点击具体系列显示该系列产品</p>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const sectionId = '{{ section.id }}';
  const menuCategories = document.querySelectorAll(`.menu-category-${sectionId}`);
  const productsPanel = document.querySelector(`.products-panel-${sectionId}`);
  let allProductsData = null;
  let hoverTimeout = null;

  // 初始化菜单交互
  function initMenuInteractions() {
    // 菜单分类点击事件 - 显示所有系列产品
    menuCategories.forEach(category => {
      category.addEventListener('click', function() {
        clearTimeout(hoverTimeout);
        loadAllProducts();
        
        // 移除所有激活状态
        document.querySelectorAll(`.collection-item-${sectionId}`).forEach(i => 
          i.classList.remove('active')
        );
        
        // 移除所有菜单分类的激活状态
        menuCategories.forEach(cat => cat.classList.remove('active'));
        // 设置当前菜单分类为激活状态
        this.classList.add('active');
      });
    });

    // 系列项点击事件 - 显示单个系列产品
    menuCategories.forEach(category => {
      const collectionItems = category.querySelectorAll(`.collection-item-${sectionId}`);
      collectionItems.forEach(item => {
        item.addEventListener('click', function(e) {
          e.stopPropagation(); // 阻止事件冒泡到父元素
          clearTimeout(hoverTimeout);
          const collectionId = this.getAttribute('data-collection-id');
          const collectionHandle = this.getAttribute('data-collection-handle');
          loadSingleCollection(collectionId, collectionHandle);
          
          // 设置激活状态
          document.querySelectorAll(`.collection-item-${sectionId}`).forEach(i => 
            i.classList.remove('active')
          );
          this.classList.add('active');
          
          // 设置父菜单分类为激活状态
          menuCategories.forEach(cat => cat.classList.remove('active'));
          category.classList.add('active');
        });
      });
    });

    // 默认加载所有产品
    setTimeout(() => {
      loadAllProducts();
      // 默认激活第一个菜单分类
      if (menuCategories.length > 0) {
        menuCategories[0].classList.add('active');
      }
    }, 500);
  }

  // 加载所有系列的产品
  function loadAllProducts() {
    if (allProductsData) {
      displayProducts(allProductsData);
      return;
    }

    // 显示加载状态
    productsPanel.innerHTML = `
      <div class="loading-${sectionId}">
        <div style="font-size: 24px; margin-bottom: 10px;">⏳</div>
        <p>正在加载所有产品...</p>
      </div>
    `;

    // 收集所有系列的产品
    const allCollections = [];
    menuCategories.forEach(category => {
      const collectionItems = category.querySelectorAll(`.collection-item-${sectionId}`);
      collectionItems.forEach(item => {
        const collectionHandle = item.getAttribute('data-collection-handle');
        if (collectionHandle) {
          allCollections.push(collectionHandle);
        }
      });
    });

    if (allCollections.length === 0) {
      showEmptyState();
      return;
    }

    // 并行加载所有系列的产品
    const promises = allCollections.map(handle => 
      fetch(`/collections/${handle}?view=ajax-products`)
        .then(response => response.ok ? response.text() : '')
        .catch(() => '')
    );

    Promise.all(promises)
      .then(results => {
        const combinedHtml = results.filter(html => html.trim()).join('');
        allProductsData = combinedHtml;
        displayProducts(combinedHtml);
      })
      .catch(error => {
        console.error('加载所有产品错误:', error);
        showErrorState();
      });
  }

  // 加载单个系列的产品
  function loadSingleCollection(collectionId, collectionHandle) {
    if (!collectionHandle) return;
    
    // 显示加载状态
    productsPanel.innerHTML = `
      <div class="loading-${sectionId}">
        <div style="font-size: 24px; margin-bottom: 10px;">⏳</div>
        <p>正在加载系列产品...</p>
      </div>
    `;

    // 使用Shopify AJAX API获取产品数据
    fetch(`/collections/${collectionHandle}?view=ajax-products`)
      .then(response => {
        if (!response.ok) throw new Error('网络响应错误');
        return response.text();
      })
      .then(html => {
        displayProducts(html);
      })
      .catch(error => {
        console.error('加载系列产品错误:', error);
        showErrorState();
      });
  }

  // 显示错误状态
  function showErrorState() {
    productsPanel.innerHTML = `
      <div class="empty-state-${sectionId}">
        <div style="font-size: 24px; margin-bottom: 10px;">❌</div>
        <h3>加载失败</h3>
        <p>无法加载产品数据，请稍后重试</p>
      </div>
    `;
  }

  // 显示空状态
  function showEmptyState() {
    productsPanel.innerHTML = `
      <div class="empty-state-${sectionId}">
        <div style="font-size: 24px; margin-bottom: 10px;">📦</div>
        <h3>暂无产品</h3>
        <p>请先配置产品系列</p>
      </div>
    `;
  }

  // 显示产品 - 优化版本
  function displayProducts(html) {
    // 输入验证和空状态处理
    if (!html || typeof html !== 'string' || html.trim() === '') {
      showEmptyState();
      return;
    }

    try {
      // 使用更现代的DOM解析方法
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // 更精确和高效的选择器 - 避免重复匹配
      // 使用层级选择器确保只选择最外层的产品容器
      let productCards = [];
      
      // 首先尝试选择最外层的产品容器
      const cardWrappers = doc.querySelectorAll('.card-wrapper:not(.card-wrapper .card-wrapper)');
      if (cardWrappers.length > 0) {
        productCards = Array.from(cardWrappers);
      } else {
        // 如果没有找到card-wrapper，尝试其他选择器但避免重复
        const allPossibleCards = doc.querySelectorAll(`
          .product-card:not(.card-wrapper *),
          .grid__item > .card:not(.card-wrapper *),
          [data-product-handle]:not(.card-wrapper *),
          [data-product-id]:not(.card-wrapper *),
          .card:not(.card-wrapper *):not(.product-card *):not([data-product-handle] *):not([data-product-id] *)
        `);
        
        // 使用更简单的方法去重 - 基于元素在DOM中的位置
        const uniqueCards = [];
        const seenElements = new Set();
        
        Array.from(allPossibleCards).forEach(card => {
          // 检查这个元素是否已经是另一个选中元素的子元素
          let isChildOfSelected = false;
          for (const selectedCard of uniqueCards) {
            if (selectedCard.contains(card)) {
              isChildOfSelected = true;
              break;
            }
          }
          
          // 检查这个元素是否包含其他已选中的元素
          let containsSelected = false;
          for (const selectedCard of uniqueCards) {
            if (card.contains(selectedCard) && card !== selectedCard) {
              containsSelected = true;
              // 如果这个元素包含已选中的元素，移除已选中的元素
              const index = uniqueCards.indexOf(selectedCard);
              if (index > -1) {
                uniqueCards.splice(index, 1);
              }
              break;
            }
          }
          
          if (!isChildOfSelected && !seenElements.has(card)) {
            uniqueCards.push(card);
            seenElements.add(card);
          }
        });
        
        productCards = uniqueCards;
      }
      
      // 最终过滤：确保没有重复的产品
      const finalProductCards = [];
      const productIds = new Set();
      
      productCards.forEach(card => {
        // 尝试获取产品ID
        const productId = card.getAttribute('data-product-id') || 
                         card.getAttribute('data-product-handle') ||
                         card.querySelector('[data-product-id]')?.getAttribute('data-product-id') ||
                         card.querySelector('[data-product-handle]')?.getAttribute('data-product-handle');
        
        if (!productId || !productIds.has(productId)) {
          if (productId) productIds.add(productId);
          finalProductCards.push(card);
        }
      });
      
      productCards = finalProductCards;
      
      let finalHtml = '';
      
      // 如果找到产品卡片，处理它们
      if (productCards.length > 0) {
        finalHtml = `
          <div class="product-grid-{{ section.id }}">
            ${Array.from(productCards).map((card, index) => {
              // 标准化产品卡片
              const cleanCard = card.cloneNode(true);
              // 清理内联样式但保留原有类名
              cleanCard.style.cssText = '';
              // 添加新的类名而不覆盖原有类名
              cleanCard.classList.add('product-card-{{ section.id }}');
              // 移除可能冲突的属性
              cleanCard.removeAttribute('id');
              cleanCard.removeAttribute('style');
              // 添加数据属性用于交互
              cleanCard.setAttribute('data-product-index', index);
              // 添加动画延迟
              cleanCard.style.animationDelay = `${index * 0.1}s`;
              
              return cleanCard.outerHTML;
            }).join('')}
          </div>
        `;
      } else {
        // 如果没有找到特定卡片，直接使用原始HTML但确保有网格容器
        finalHtml = `
          <div class="product-grid-{{ section.id }}">
            ${html}
          </div>
        `;
      }

      // 使用requestAnimationFrame提高性能
      requestAnimationFrame(() => {
        productsPanel.innerHTML = finalHtml;
        // 添加产品卡片交互效果
        addProductCardInteractions();
      });
      
    } catch (error) {
      console.warn('产品显示处理失败，使用回退方案:', error);
      // 回退到原始方法
      fallbackDisplay(html);
    }
  }

  // 添加产品卡片交互效果
  function addProductCardInteractions() {
    const cards = productsPanel.querySelectorAll('.product-card-{{ section.id }}');
    
    // 使用事件委托提高性能
    cards.forEach(card => {
      card.addEventListener('mouseenter', handleCardHover);
      card.addEventListener('mouseleave', handleCardLeave);
    });
  }

  // 处理悬停效果
  function handleCardHover(e) {
    const card = e.currentTarget;
    card.style.transform = 'translateY(-4px)';
    card.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
    card.style.transition = 'all 0.3s ease';
  }

  // 处理离开效果
  function handleCardLeave(e) {
    const card = e.currentTarget;
    card.style.transform = 'translateY(0)';
    card.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
  }

  // 回退显示方法
  function fallbackDisplay(html) {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    const productCards = tempDiv.querySelectorAll('.card, .product-card, .grid__item, .card__inner');
    
    let finalHtml = '';
    
    if (productCards.length > 0) {
      finalHtml = `
        <div class="product-grid-{{ section.id }}">
          ${Array.from(productCards).map(card => {
            const cleanCard = card.cloneNode(true);
            cleanCard.style.cssText = '';
            // 保留原有类名，只添加新类名
            cleanCard.classList.add('product-card-{{ section.id }}');
            return cleanCard.outerHTML;
          }).join('')}
        </div>
      `;
    } else {
      finalHtml = `
        <div class="product-grid-{{ section.id }}">
          ${html}
        </div>
      `;
    }
    
    productsPanel.innerHTML = finalHtml;
    addProductCardInteractions();
  }

  // 初始化
  initMenuInteractions();
});

// 添加CSS动画
const style = document.createElement('style');
style.textContent = `
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .product-card-{{ section.id }} {
    animation: fadeIn 0.5s ease forwards;
  }
  
  .product-card-{{ section.id }}:nth-child(1) { animation-delay: 0.1s; }
  .product-card-{{ section.id }}:nth-child(2) { animation-delay: 0.2s; }
  .product-card-{{ section.id }}:nth-child(3) { animation-delay: 0.3s; }
  .product-card-{{ section.id }}:nth-child(4) { animation-delay: 0.4s; }
  .product-card-{{ section.id }}:nth-child(5) { animation-delay: 0.5s; }
  .product-card-{{ section.id }}:nth-child(6) { animation-delay: 0.6s; }
  
  /* 悬停效果增强 */
  .collection-item-{{ section.id }}:hover {
    background-color: #f8f8f8;
    transform: translateY(-2px);
    transition: all 0.2s ease;
  }
  
  .collection-item-{{ section.id }}.active {
    background-color: #e3f2fd;
    color: {{ section.settings.primary_color }};
    font-weight: 600;
  }
`;
document.head.appendChild(style);
</script>

{% comment %}
  使用说明:
  1. 将此文件保存为 sections/custom-menu.liquid
  2. 在主题编辑器中添加此section
  3. 点击"添加内容"创建菜单按钮
  4. 为每个按钮配置标题、描述和关联的系列
  5. 保存后即可使用
{% endcomment %}
